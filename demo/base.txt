正则解析网站：https://regexper.com/

正则的声明：
-var reg = /\bis\b/g
-var reg = new RegExp("\\bis\\b","g");


g:global全文搜索，不添加，搜索到第一个匹配停止
i:ignore case忽略大小写,默认大小写敏感
m:multiple lines多行搜索
lastIndex:当前表达式匹配内容的最后一个字符的下一个位置
source:正则表达式的文本字符串


正则表达式由两种基本字符类型组成：
-原意文本字符（abc,dsdf,123）:普通的字符
-元字符(\b):在正则表达式中有特殊含义的非字母字符


字符类
-[a,b,c]:把a,b,c字符分为一类，匹配其中的任意一个
'a1b2c3'.replace(/[abc]/g,'x');
"x1x2x3"


字符类取反
-[^a,b,c]
'a1b2c3'.replace(/[^abc]/g,'x');
"axbxcx"


范围类
-[a-zA-Z]:表示a到z和A到Z的字母
'a1b2c3'.replace(/[a-z]/g,'x');
"x1x2x3"
'2016-11-19'.replace(/[0-9]/g,'Q');
"QQQQ-QQ-QQ"
'2016-11-19'.replace(/[0-9-]/g,'Q');
"QQQQQQQQQQ"


预定义类
.	[^/r/n]任意字符（有可能包括行结束符）
\d	数字字符：[0-9]
\D	非数字字符：[^0-9]
\s	一个空白字符：[ \t\n\x0B\f\r]
\S	一个非空白字符：[^\s]
\w	一个单词字符：[a-zA-Z_0-9]
\W	一个非单词字符：[^\w]


贪婪模式与非贪婪模式
-默认是贪婪模式，尽可能多的匹配
"123123123x".replace(/\d{3,5}/g,"Q");
"QQx"
-非贪婪模式，尽可能少的匹配
"123123123x".replace(/\d{3,5}?/g,"Q");
"QQQx"


分组
'hello120391203world'.replace(/([a-z]+)\d+([a-z]+)/g,'$1$2');
"helloworld"
忽略分组
'hello120391203world'.replace(/(?:[a-z]+)\d+([a-z]+)/g,'$1');
"world"

前瞻
-正向前瞻
'a1bb22*c3'.replace(/\w(?=\d)/g,'M');前面是单词后面是数字，括号()内的是断言，用作判断，不参与替换
"M1bMM2*M3"
-负向前瞻
'a1bb22*c3'.replace(/\w(?!\d)/g,'M');前面是单词后面不是数字
"aMMb2M*cM"

量词
$
匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n' 或 ‘\r'。要匹配 $ 字符本身，请使用 \$。
( )
标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。
*
匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。
+
匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。
.
匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。
[ ]
标记一个中括号表达式的开始。要匹配 [，请使用 \[。
?
匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。
\
将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n' 匹配字符 ‘n'。'\n' 匹配换行符。序列 ‘\\' 匹配 “\”，而 ‘\(' 则匹配 “(”。
^
匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。
{ }
标记限定符表达式的开始。要匹配 {，请使用 \{。
|
指明两项之间的一个选择。要匹配 |，请使用 \|。


匹配邮箱：
/^[a-zA-Z0-9]+([._-][a-zA-Z0-9]+)*@([a-zA-Z0-9]+\.)+[a-zA-Z0-9]{2,5}$/


exec:
var reg = /\d(\w)(\w)\d/g;
var str = "$1ac3ks234cd5sdf";
var ret;
while(ret = reg.exec(str)){
  console.log(reg.lastIndex+"\t"+ret.index+"\t"+ret.toString());
}

"5  1 1ac3,a,c"
"13 9 4cd5,c,d"


split:
'1,2.2-d'.split(/[,.-]/)

["1", "2", "2", "d"]


replace(reg,function(param){});
4个参数：
-匹配字符串
-正则表达式分组内容，没有分组就没有该参数
-匹配项字符串中的index
-原字符串

'a1b2c3d4e5'.replace(/\d/g,function(match,index,orgin)
{
	return parseInt(match)+1;
});
"a2b3c4d5e6"

'a1b2c3d4e5'.replace(/(\d)(\w)(\d)/g,function(match,group1,group2,group3,index,orgin)
{
	return group1+group3;
});
"a12c34e5"